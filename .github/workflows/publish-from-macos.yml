name: Publish macOS Artifact

on:
  workflow_dispatch:
    inputs:
      source_run_id:
        description: 'Run ID from trifecta-native-agent-main (leave blank to use latest successful on main)'
        required: false
        default: ''
      tag_name:
        description: 'Custom tag name (optional, auto-generates if empty)'
        required: false
        default: ''

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Resolve run id
        id: resolve
        env:
          GH_TOKEN: ${{ secrets.CROSS_REPO_TOKEN }}
        run: |
          if [ -n "${{ github.event.inputs.source_run_id }}" ]; then
            echo "RUN_ID=${{ github.event.inputs.source_run_id }}" >> $GITHUB_OUTPUT
          else
            # Find latest successful macOS build on main
            RID=$(gh run list --repo Carmel-Labs-Inc/trifecta-native-agent-main \
              --workflow build-macos.yml --branch main \
              --json databaseId,conclusion --limit 20 | \
              jq -r '.[] | select(.conclusion=="success") | .databaseId' | head -n 1)
            if [ -z "$RID" ]; then 
              echo "No successful run found. You may need to specify source_run_id manually."
              exit 1
            fi
            echo "RUN_ID=$RID" >> $GITHUB_OUTPUT
          fi
      
      - name: Download artifact from trifecta-native-agent-main
        env:
          GH_TOKEN: ${{ secrets.CROSS_REPO_TOKEN }}
        run: |
          mkdir -p out
          # Adjust artifact name based on your actual macOS build artifact name
          gh run download ${{ steps.resolve.outputs.RUN_ID }} \
            --repo Carmel-Labs-Inc/trifecta-native-agent-main \
            -n TrifectaAgentClient-macOS -D out || \
          gh run download ${{ steps.resolve.outputs.RUN_ID }} \
            --repo Carmel-Labs-Inc/trifecta-native-agent-main \
            -n TrifectaAgentClient-Separate -D out || \
          echo "Note: Artifact download might fail if no build artifact exists yet"
          ls -la out
      
      - name: Calculate SHA256
        id: hash
        run: |
          ASSET=$(find out -name 'TrifectaAgentClient-Separate.zip' -o -name 'TrifectaAgentClient-macOS.zip' | head -n1)
          if [ -z "$ASSET" ]; then 
            echo "Zip not found in artifacts"
            exit 1
          fi
          SHA=$(sha256sum "$ASSET" | cut -d' ' -f1 | tr '[:lower:]' '[:upper:]')
          echo "SHA256=$SHA" >> $GITHUB_OUTPUT
          echo "ASSET_PATH=$ASSET" >> $GITHUB_OUTPUT
          echo "Calculated SHA256: $SHA"
      
      - name: Publish releases
        env:
          GH_TOKEN: ${{ secrets.CROSS_REPO_TOKEN }}
        run: |
          set -e
          ASSET="${{ steps.hash.outputs.ASSET_PATH }}"
          
          # Determine tag name
          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            TAG="${{ github.event.inputs.tag_name }}"
          else
            TAG="macos-v1.0.0-notarized-$(date +%s)"
          fi
          
          echo "Creating release with tag: $TAG"
          
          # Create dated release
          gh release view "$TAG" >/dev/null 2>&1 || \
            gh release create "$TAG" \
              -t "macOS v1.0.0 - Notarized Build" \
              -n "macOS notarized build with 960x540 video quality. SHA256: ${{ steps.hash.outputs.SHA256 }}"
          
          # Upload to dated release
          gh release upload "$TAG" "$ASSET" --clobber
          
          # Create or update latest-macos release
          gh release view latest-macos >/dev/null 2>&1 || \
            gh release create latest-macos \
              -t "Latest macOS Build" \
              -n "Latest macOS notarized build"
          
          # Upload to latest-macos
          gh release upload latest-macos "$ASSET" --clobber
          
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "DOWNLOAD_URL=https://github.com/Carmel-Labs-Inc/trifecta-agent-downloads/releases/download/$TAG/$(basename $ASSET)" >> $GITHUB_ENV
      
      - name: Update macOS manifest
        run: |
          mkdir -p manifest
          
          # Create latest-macos.json manifest
          cat > manifest/latest-macos.json <<EOF
          {"url": "${{ env.DOWNLOAD_URL }}", "sha256": "${{ steps.hash.outputs.SHA256 }}"}
          EOF
          
          echo "Created manifest:"
          cat manifest/latest-macos.json
          
          # Commit and push
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add manifest/latest-macos.json
          git commit -m "Update macOS manifest to ${{ env.TAG }}" || echo "No changes to commit"
          git push
      
      - name: Summary
        run: |
          echo "## macOS Release Published! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** \`${{ env.TAG }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**SHA256:** \`${{ steps.hash.outputs.SHA256 }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Download URL:** ${{ env.DOWNLOAD_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "**Manifest:** \`manifest/latest-macos.json\` updated" >> $GITHUB_STEP_SUMMARY

